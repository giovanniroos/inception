# To generate the application keystore:
#   keytool -genkeypair -keystore sample.p12 -storetype pkcs12 -storepass sample -alias sample -keyalg RSA -keysize 2048 -keypass sample -validity 7300 -dname "CN=sample" -ext san=dns:sample.local,dns:localhost,ip:127.0.0.1
#
# To generate an RSA PKCS8 key-pair to sign JWTs, execute the following commands:
#   openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:65537 | openssl pkcs8 -topk8 -nocrypt -outform pem > rsa-2048-private-key.p8
#   openssl pkey -pubout -inform pem -outform pem -in rsa-2048-private-key.p8 -out rsa-2048-public-key.p8

server:
  port: 8080

  ssl:
    enabled: false
    key-store: classpath:META-INF/sample.p12
    key-store-type: pkcs12
    key-store-password: sample
    key-password: sample
    key-alias: sample
    protocol: TLS
#    trust-store: classpath:META-INF/sample.p12
#    trust-store-type: pkcs12
#    trust-store-password: sample

#  security:
#    keyStore:
#      type: JKS
#      path: classpath:META-INF/Sample.jks
#      alias: Sample
#      password: Sample
#    trustStore:
#      type: JKS
#      path: classpath:META-INF/Sample.jks
#      password: Sample


inception:
  application:
    data-source:
      class-name: org.h2.jdbcx.JdbcDataSource
      url: jdbc:h2:mem:application;MODE=DB2;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      min-pool-size: 5
      max-pool-size: 10
#      recovery:
#        enabled: false
#        username: USERNAME
#        password: PASSWORD

#    data-source:
#      class-name: org.postgresql.jdbc3.Jdbc3SimpleDataSource
#      url: jdbc:postgresql://localhost:5432/sample
#      username: sample
#      password: Password1
#      min-pool-size: 5
#      max-pool-size: 10
#      recovery:
#        enabled: false
#        username: USERNAME
#        password: PASSWORD

#    data-source:
#      class-name: com.microsoft.sqlserver.jdbc.SQLServerXADataSource
#      url: jdbc:sqlserver://192.168.185.130:1433;databaseName=Sample;user=Sample;password=Password1
#      min-pool-size: 5
#      max-pool-size: 10
#      recovery:
#        enabled: false
#        username: USERNAME
#        password: PASSWORD

  cache:
    hazelcast:
      server:
        enabled: true
        cluster:
          port: 15000
          name: sample-cluster
          password: YROTLEYO6Z05WAXbCuK4
          members:
        caches:
          - cache:
            name: sample-cache
            max-size-policy: PER_NODE
            maxSize: 10000
            in-memory-format: OBJECT
            eviction-policy: LRU
            statistics-enabled: true
            max-idle-seconds: 300
            backup-count: 0
            async-backup-count: 0
            read-backup-data: false

  messaging:
    encryption-key: m/4Wu7iHTCBVu0Bb1JojAhzWQtA5cWIzbWY2YjhmOGE=
    processing-retry-delay: 60000
    maximum-processing-attempts: 1000

  oauth2:
    authorization-server:
      jwt:
        private-key-location: classpath:META-INF/oauth2-jwt-key
        public-key-location: classpath:META-INF/oauth2-jwt-key.pub

  persistence:
    entity-packages: digital.inception.sample

  sms:
    maximum-send-attempts: 100
    providers:
      sms-portal:
        api-endpoint: https://rest.smsportal.com/v1
        client-id: CLIENT_ID
        client-secret: CLIENT_SECRET
    send-retry-delay: 600000
    use-provider: sms-portal

  ws:
    security:
      x509-certificate-token-profile:
        enabled: false
        key-store: classpath:META-INF/sample.p12
        key-store-type: pkcs12
        key-store-password: sample
        key-password: sample
        key-alias: sample
        protocol: TLS
        trust-store: classpath:META-INF/sample.p12
        trust-store-type: pkcs12
        trust-store-password: sample

spring:
  application:
    name: inception-sample
  mail:
    default-encoding: UTF-8
    protocol: smtp
    host: localhost
    port: 2500
    username: inception
    password: inception
  security:
    oauth2:
      resourceserver:
        jwt:
          public-key-location: classpath:META-INF/oauth2-jwt-key.pub
