-- -------------------------------------------------------------------------------------------------
-- CREATE SCHEMA
-- -------------------------------------------------------------------------------------------------
CREATE SCHEMA CAMUNDA;

-- -------------------------------------------------------------------------------------------------
-- CREATE TABLES
-- -------------------------------------------------------------------------------------------------
CREATE TABLE CAMUNDA.ACT_GE_BYTEARRAY (
    ID_                VARCHAR(64),
    REV_               INTEGER,
    NAME_              VARCHAR(255),
    DEPLOYMENT_ID_     VARCHAR(64),
    BYTES_             LONGVARBINARY,
    GENERATED_         BIT,
    TENANT_ID_         VARCHAR(64),
    TYPE_              INTEGER,
    CREATE_TIME_       TIMESTAMP,
    ROOT_PROC_INST_ID_ VARCHAR(64),
    REMOVAL_TIME_      TIMESTAMP,
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_GE_PROPERTY (
    NAME_  VARCHAR(64),
    VALUE_ VARCHAR(300),
    REV_   INTEGER,
    PRIMARY KEY (NAME_)
);

CREATE TABLE CAMUNDA.ACT_GE_SCHEMA_LOG (
    ID_        VARCHAR(64),
    TIMESTAMP_ TIMESTAMP,
    VERSION_   VARCHAR(255),
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RE_DEPLOYMENT (
    ID_          VARCHAR(64),
    NAME_        VARCHAR(255),
    DEPLOY_TIME_ TIMESTAMP,
    SOURCE_      VARCHAR(255),
    TENANT_ID_   VARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_EXECUTION (
    ID_                VARCHAR(64),
    REV_               INTEGER,
    ROOT_PROC_INST_ID_ VARCHAR(64),
    PROC_INST_ID_      VARCHAR(64),
    BUSINESS_KEY_      VARCHAR(255),
    PARENT_ID_         VARCHAR(64),
    PROC_DEF_ID_       VARCHAR(64),
    SUPER_EXEC_        VARCHAR(64),
    SUPER_CASE_EXEC_   VARCHAR(64),
    CASE_INST_ID_      VARCHAR(64),
    ACT_INST_ID_       VARCHAR(64),
    ACT_ID_            VARCHAR(255),
    IS_ACTIVE_         BIT,
    IS_CONCURRENT_     BIT,
    IS_SCOPE_          BIT,
    IS_EVENT_SCOPE_    BIT,
    SUSPENSION_STATE_  INTEGER,
    CACHED_ENT_STATE_  INTEGER,
    SEQUENCE_COUNTER_  INTEGER,
    TENANT_ID_         VARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_JOB (
    ID_                  VARCHAR(64)  NOT NULL,
    REV_                 INTEGER,
    TYPE_                VARCHAR(255) NOT NULL,
    LOCK_EXP_TIME_       TIMESTAMP,
    LOCK_OWNER_          VARCHAR(255),
    EXCLUSIVE_           BOOLEAN,
    EXECUTION_ID_        VARCHAR(64),
    PROCESS_INSTANCE_ID_ VARCHAR(64),
    PROCESS_DEF_ID_      VARCHAR(64),
    PROCESS_DEF_KEY_     VARCHAR(255),
    RETRIES_             INTEGER,
    EXCEPTION_STACK_ID_  VARCHAR(64),
    EXCEPTION_MSG_       VARCHAR(4000),
    DUEDATE_             TIMESTAMP,
    REPEAT_              VARCHAR(255),
    REPEAT_OFFSET_       BIGINT                DEFAULT 0,
    HANDLER_TYPE_        VARCHAR(255),
    HANDLER_CFG_         VARCHAR(4000),
    DEPLOYMENT_ID_       VARCHAR(64),
    SUSPENSION_STATE_    INTEGER      NOT NULL DEFAULT 1,
    JOB_DEF_ID_          VARCHAR(64),
    PRIORITY_            BIGINT       NOT NULL DEFAULT 0,
    SEQUENCE_COUNTER_    INTEGER,
    TENANT_ID_           VARCHAR(64),
    CREATE_TIME_         TIMESTAMP,
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_JOBDEF (
    ID_                VARCHAR(64)  NOT NULL,
    REV_               INTEGER,
    PROC_DEF_ID_       VARCHAR(64),
    PROC_DEF_KEY_      VARCHAR(255),
    ACT_ID_            VARCHAR(255),
    JOB_TYPE_          VARCHAR(255) NOT NULL,
    JOB_CONFIGURATION_ VARCHAR(255),
    SUSPENSION_STATE_  INTEGER,
    JOB_PRIORITY_      BIGINT,
    TENANT_ID_         VARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RE_PROCDEF (
    ID_                 VARCHAR(64)  NOT NULL,
    REV_                INTEGER,
    CATEGORY_           VARCHAR(255),
    NAME_               VARCHAR(255),
    KEY_                VARCHAR(255) NOT NULL,
    VERSION_            INTEGER      NOT NULL,
    DEPLOYMENT_ID_      VARCHAR(64),
    RESOURCE_NAME_      VARCHAR(4000),
    DGRM_RESOURCE_NAME_ VARCHAR(4000),
    HAS_START_FORM_KEY_ BIT,
    SUSPENSION_STATE_   INTEGER,
    TENANT_ID_          VARCHAR(64),
    VERSION_TAG_        VARCHAR(64),
    HISTORY_TTL_        INTEGER,
    STARTABLE_          BOOLEAN      NOT NULL DEFAULT TRUE,
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_TASK (
    ID_                VARCHAR(64),
    REV_               INTEGER,
    EXECUTION_ID_      VARCHAR(64),
    PROC_INST_ID_      VARCHAR(64),
    PROC_DEF_ID_       VARCHAR(64),
    CASE_EXECUTION_ID_ VARCHAR(64),
    CASE_INST_ID_      VARCHAR(64),
    CASE_DEF_ID_       VARCHAR(64),
    NAME_              VARCHAR(255),
    PARENT_TASK_ID_    VARCHAR(64),
    DESCRIPTION_       VARCHAR(4000),
    TASK_DEF_KEY_      VARCHAR(255),
    OWNER_             VARCHAR(255),
    ASSIGNEE_          VARCHAR(255),
    DELEGATION_        VARCHAR(64),
    PRIORITY_          INTEGER,
    CREATE_TIME_       TIMESTAMP,
    DUE_DATE_          TIMESTAMP,
    FOLLOW_UP_DATE_    TIMESTAMP,
    SUSPENSION_STATE_  INTEGER,
    TENANT_ID_         VARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_IDENTITYLINK (
    ID_          VARCHAR(64),
    REV_         INTEGER,
    GROUP_ID_    VARCHAR(255),
    TYPE_        VARCHAR(255),
    USER_ID_     VARCHAR(255),
    TASK_ID_     VARCHAR(64),
    PROC_DEF_ID_ VARCHAR(64),
    TENANT_ID_   VARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_VARIABLE (
    ID_                  VARCHAR(64)  NOT NULL,
    REV_                 INTEGER,
    TYPE_                VARCHAR(255) NOT NULL,
    NAME_                VARCHAR(255) NOT NULL,
    EXECUTION_ID_        VARCHAR(64),
    PROC_INST_ID_        VARCHAR(64),
    CASE_EXECUTION_ID_   VARCHAR(64),
    CASE_INST_ID_        VARCHAR(64),
    TASK_ID_             VARCHAR(64),
    BYTEARRAY_ID_        VARCHAR(64),
    DOUBLE_              DOUBLE,
    LONG_                BIGINT,
    TEXT_                VARCHAR(4000),
    TEXT2_               VARCHAR(4000),
    VAR_SCOPE_           VARCHAR(64)  NOT NULL,
    SEQUENCE_COUNTER_    INTEGER,
    IS_CONCURRENT_LOCAL_ BIT,
    TENANT_ID_           VARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_EVENT_SUBSCR (
    ID_            VARCHAR(64)  NOT NULL,
    REV_           INTEGER,
    EVENT_TYPE_    VARCHAR(255) NOT NULL,
    EVENT_NAME_    VARCHAR(255),
    EXECUTION_ID_  VARCHAR(64),
    PROC_INST_ID_  VARCHAR(64),
    ACTIVITY_ID_   VARCHAR(255),
    CONFIGURATION_ VARCHAR(255),
    CREATED_       TIMESTAMP    NOT NULL,
    TENANT_ID_     VARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_INCIDENT (
    ID_                     VARCHAR(64)  NOT NULL,
    REV_                    INTEGER      NOT NULL,
    INCIDENT_TIMESTAMP_     TIMESTAMP    NOT NULL,
    INCIDENT_MSG_           VARCHAR(4000),
    INCIDENT_TYPE_          VARCHAR(255) NOT NULL,
    EXECUTION_ID_           VARCHAR(64),
    ACTIVITY_ID_            VARCHAR(255),
    PROC_INST_ID_           VARCHAR(64),
    PROC_DEF_ID_            VARCHAR(64),
    CAUSE_INCIDENT_ID_      VARCHAR(64),
    ROOT_CAUSE_INCIDENT_ID_ VARCHAR(64),
    CONFIGURATION_          VARCHAR(255),
    TENANT_ID_              VARCHAR(64),
    JOB_DEF_ID_             VARCHAR(64),
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_AUTHORIZATION (
    ID_            VARCHAR(64) NOT NULL,
    REV_           INTEGER     NOT NULL,
    TYPE_          INTEGER     NOT NULL,
    GROUP_ID_      VARCHAR(255),
    USER_ID_       VARCHAR(255),
    RESOURCE_TYPE_ INTEGER     NOT NULL,
    RESOURCE_ID_   VARCHAR(255),
    PERMS_         INTEGER,
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_FILTER (
    ID_            VARCHAR(64)  NOT NULL,
    REV_           INTEGER      NOT NULL,
    RESOURCE_TYPE_ VARCHAR(255) NOT NULL,
    NAME_          VARCHAR(255) NOT NULL,
    OWNER_         VARCHAR(255),
    QUERY_         CLOB         NOT NULL,
    PROPERTIES_    CLOB,
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_METER_LOG (
    ID_           VARCHAR(64) NOT NULL,
    NAME_         VARCHAR(64) NOT NULL,
    REPORTER_     VARCHAR(255),
    VALUE_        LONG,
    TIMESTAMP_    TIMESTAMP,
    MILLISECONDS_ BIGINT DEFAULT 0,
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_EXT_TASK (
    ID_               VARCHAR(64) NOT NULL,
    REV_              INTEGER     NOT NULL,
    WORKER_ID_        VARCHAR(255),
    TOPIC_NAME_       VARCHAR(255),
    RETRIES_          INTEGER,
    ERROR_MSG_        VARCHAR(4000),
    ERROR_DETAILS_ID_ VARCHAR(64),
    LOCK_EXP_TIME_    TIMESTAMP,
    SUSPENSION_STATE_ INTEGER,
    EXECUTION_ID_     VARCHAR(64),
    PROC_INST_ID_     VARCHAR(64),
    PROC_DEF_ID_      VARCHAR(64),
    PROC_DEF_KEY_     VARCHAR(255),
    ACT_ID_           VARCHAR(255),
    ACT_INST_ID_      VARCHAR(64),
    TENANT_ID_        VARCHAR(64),
    PRIORITY_         BIGINT      NOT NULL DEFAULT 0,
    PRIMARY KEY (ID_)
);

CREATE TABLE CAMUNDA.ACT_RU_BATCH (
    ID_                  VARCHAR(64) NOT NULL,
    REV_                 INTEGER     NOT NULL,
    TYPE_                VARCHAR(255),
    TOTAL_JOBS_          INTEGER,
    JOBS_CREATED_        INTEGER,
    JOBS_PER_SEED_       INTEGER,
    INVOCATIONS_PER_JOB_ INTEGER,
    SEED_JOB_DEF_ID_     VARCHAR(64),
    BATCH_JOB_DEF_ID_    VARCHAR(64),
    MONITOR_JOB_DEF_ID_  VARCHAR(64),
    SUSPENSION_STATE_    INTEGER,
    CONFIGURATION_       VARCHAR(255),
    TENANT_ID_           VARCHAR(64),
    CREATE_USER_ID_      VARCHAR(255),
    PRIMARY KEY (ID_)
);

CREATE INDEX ACT_IDX_EXEC_ROOT_PI ON CAMUNDA.ACT_RU_EXECUTION(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_EXEC_BUSKEY ON CAMUNDA.ACT_RU_EXECUTION(BUSINESS_KEY_);
CREATE INDEX ACT_IDX_EXEC_TENANT_ID ON CAMUNDA.ACT_RU_EXECUTION(TENANT_ID_);
CREATE INDEX ACT_IDX_TASK_CREATE ON CAMUNDA.ACT_RU_TASK(CREATE_TIME_);
CREATE INDEX ACT_IDX_TASK_ASSIGNEE ON CAMUNDA.ACT_RU_TASK(ASSIGNEE_);
CREATE INDEX ACT_IDX_TASK_TENANT_ID ON CAMUNDA.ACT_RU_TASK(TENANT_ID_);
CREATE INDEX ACT_IDX_IDENT_LNK_USER ON CAMUNDA.ACT_RU_IDENTITYLINK(USER_ID_);
CREATE INDEX ACT_IDX_IDENT_LNK_GROUP ON CAMUNDA.ACT_RU_IDENTITYLINK(GROUP_ID_);
CREATE INDEX ACT_IDX_EVENT_SUBSCR_CONFIG_ ON CAMUNDA.ACT_RU_EVENT_SUBSCR(CONFIGURATION_);
CREATE INDEX ACT_IDX_EVENT_SUBSCR_TENANT_ID ON CAMUNDA.ACT_RU_EVENT_SUBSCR(TENANT_ID_);
CREATE INDEX ACT_IDX_VARIABLE_TASK_ID ON CAMUNDA.ACT_RU_VARIABLE(TASK_ID_);
CREATE INDEX ACT_IDX_VARIABLE_TENANT_ID ON CAMUNDA.ACT_RU_VARIABLE(TENANT_ID_);
CREATE INDEX ACT_IDX_ATHRZ_PROCEDEF ON CAMUNDA.ACT_RU_IDENTITYLINK(PROC_DEF_ID_);
CREATE INDEX ACT_IDX_INC_CONFIGURATION ON CAMUNDA.ACT_RU_INCIDENT(CONFIGURATION_);
CREATE INDEX ACT_IDX_INC_TENANT_ID ON CAMUNDA.ACT_RU_INCIDENT(TENANT_ID_);
-- CAM-5914
CREATE INDEX ACT_IDX_JOB_EXECUTION_ID ON CAMUNDA.ACT_RU_JOB(EXECUTION_ID_);
CREATE INDEX ACT_IDX_JOB_HANDLER ON CAMUNDA.ACT_RU_JOB(HANDLER_TYPE_, HANDLER_CFG_);
CREATE INDEX ACT_IDX_JOB_PROCINST ON CAMUNDA.ACT_RU_JOB(PROCESS_INSTANCE_ID_);
CREATE INDEX ACT_IDX_JOB_TENANT_ID ON CAMUNDA.ACT_RU_JOB(TENANT_ID_);
CREATE INDEX ACT_IDX_JOBDEF_TENANT_ID ON CAMUNDA.ACT_RU_JOBDEF(TENANT_ID_);

-- NEW METRIC MILLISECONDS COLUMN
CREATE INDEX ACT_IDX_METER_LOG_MS ON CAMUNDA.ACT_RU_METER_LOG(MILLISECONDS_);
CREATE INDEX ACT_IDX_METER_LOG_NAME_MS ON CAMUNDA.ACT_RU_METER_LOG(NAME_, MILLISECONDS_);
CREATE INDEX ACT_IDX_METER_LOG_REPORT ON CAMUNDA.ACT_RU_METER_LOG(NAME_, REPORTER_, MILLISECONDS_);

-- OLD METRIC TIMESTAMP COLUMN
CREATE INDEX ACT_IDX_METER_LOG_TIME ON CAMUNDA.ACT_RU_METER_LOG(TIMESTAMP_);
CREATE INDEX ACT_IDX_METER_LOG ON CAMUNDA.ACT_RU_METER_LOG(NAME_, TIMESTAMP_);

CREATE INDEX ACT_IDX_EXT_TASK_TOPIC ON CAMUNDA.ACT_RU_EXT_TASK(TOPIC_NAME_);
CREATE INDEX ACT_IDX_EXT_TASK_TENANT_ID ON CAMUNDA.ACT_RU_EXT_TASK(TENANT_ID_);
CREATE INDEX ACT_IDX_EXT_TASK_PRIORITY ON CAMUNDA.ACT_RU_EXT_TASK(PRIORITY_);
CREATE INDEX ACT_IDX_EXT_TASK_ERR_DETAILS ON CAMUNDA.ACT_RU_EXT_TASK(ERROR_DETAILS_ID_);
CREATE INDEX ACT_IDX_AUTH_GROUP_ID ON CAMUNDA.ACT_RU_AUTHORIZATION(GROUP_ID_);
CREATE INDEX ACT_IDX_JOB_JOB_DEF_ID ON CAMUNDA.ACT_RU_JOB(JOB_DEF_ID_);

-- INDEXES FOR DEADLOCK PROBLEMS - HTTPS://APP.CAMUNDA.COM/JIRA/BROWSE/CAM-2567 --
CREATE INDEX ACT_IDX_INC_CAUSEINCID ON CAMUNDA.ACT_RU_INCIDENT(CAUSE_INCIDENT_ID_);
CREATE INDEX ACT_IDX_INC_EXID ON CAMUNDA.ACT_RU_INCIDENT(EXECUTION_ID_);
CREATE INDEX ACT_IDX_INC_PROCDEFID ON CAMUNDA.ACT_RU_INCIDENT(PROC_DEF_ID_);
CREATE INDEX ACT_IDX_INC_PROCINSTID ON CAMUNDA.ACT_RU_INCIDENT(PROC_INST_ID_);
CREATE INDEX ACT_IDX_INC_ROOTCAUSEINCID ON CAMUNDA.ACT_RU_INCIDENT(ROOT_CAUSE_INCIDENT_ID_);
-- INDEX FOR DEADLOCK PROBLEM - HTTPS://APP.CAMUNDA.COM/JIRA/BROWSE/CAM-4440 --
CREATE INDEX ACT_IDX_AUTH_RESOURCE_ID ON CAMUNDA.ACT_RU_AUTHORIZATION(RESOURCE_ID_);
-- INDEX TO PREVENT DEADLOCK ON FK CONSTRAINT - HTTPS://APP.CAMUNDA.COM/JIRA/BROWSE/CAM-5440 --
CREATE INDEX ACT_IDX_EXT_TASK_EXEC ON CAMUNDA.ACT_RU_EXT_TASK(EXECUTION_ID_);

-- INDEXES TO IMPROVE DEPLOYMENT
CREATE INDEX ACT_IDX_BYTEARRAY_ROOT_PI ON CAMUNDA.ACT_GE_BYTEARRAY(ROOT_PROC_INST_ID_);
CREATE INDEX ACT_IDX_BYTEARRAY_RM_TIME ON CAMUNDA.ACT_GE_BYTEARRAY(REMOVAL_TIME_);
CREATE INDEX ACT_IDX_BYTEARRAY_NAME ON CAMUNDA.ACT_GE_BYTEARRAY(NAME_);
CREATE INDEX ACT_IDX_DEPLOYMENT_NAME ON CAMUNDA.ACT_RE_DEPLOYMENT(NAME_);
CREATE INDEX ACT_IDX_DEPLOYMENT_TENANT_ID ON CAMUNDA.ACT_RE_DEPLOYMENT(TENANT_ID_);
CREATE INDEX ACT_IDX_JOBDEF_PROC_DEF_ID ON CAMUNDA.ACT_RU_JOBDEF(PROC_DEF_ID_);
CREATE INDEX ACT_IDX_JOB_HANDLER_TYPE ON CAMUNDA.ACT_RU_JOB(HANDLER_TYPE_);
CREATE INDEX ACT_IDX_EVENT_SUBSCR_EVT_NAME ON CAMUNDA.ACT_RU_EVENT_SUBSCR(EVENT_NAME_);
CREATE INDEX ACT_IDX_PROCDEF_DEPLOYMENT_ID ON CAMUNDA.ACT_RE_PROCDEF(DEPLOYMENT_ID_);
CREATE INDEX ACT_IDX_PROCDEF_TENANT_ID ON CAMUNDA.ACT_RE_PROCDEF(TENANT_ID_);
CREATE INDEX ACT_IDX_PROCDEF_VER_TAG ON CAMUNDA.ACT_RE_PROCDEF(VERSION_TAG_);

ALTER TABLE CAMUNDA.ACT_GE_BYTEARRAY
    ADD CONSTRAINT ACT_FK_BYTEARR_DEPL
        FOREIGN KEY (DEPLOYMENT_ID_)
            REFERENCES ACT_RE_DEPLOYMENT;

ALTER TABLE CAMUNDA.ACT_RU_EXECUTION
    ADD CONSTRAINT ACT_FK_EXE_PROCINST
        FOREIGN KEY (PROC_INST_ID_)
            REFERENCES ACT_RU_EXECUTION;

ALTER TABLE CAMUNDA.ACT_RU_EXECUTION
    ADD CONSTRAINT ACT_FK_EXE_PARENT
        FOREIGN KEY (PARENT_ID_)
            REFERENCES ACT_RU_EXECUTION;

ALTER TABLE CAMUNDA.ACT_RU_EXECUTION
    ADD CONSTRAINT ACT_FK_EXE_SUPER
        FOREIGN KEY (SUPER_EXEC_)
            REFERENCES ACT_RU_EXECUTION;

ALTER TABLE CAMUNDA.ACT_RU_EXECUTION
    ADD CONSTRAINT ACT_FK_EXE_PROCDEF
        FOREIGN KEY (PROC_DEF_ID_)
            REFERENCES ACT_RE_PROCDEF(ID_);

ALTER TABLE CAMUNDA.ACT_RU_IDENTITYLINK
    ADD CONSTRAINT ACT_FK_TSKASS_TASK
        FOREIGN KEY (TASK_ID_)
            REFERENCES ACT_RU_TASK;

ALTER TABLE CAMUNDA.ACT_RU_IDENTITYLINK
    ADD CONSTRAINT ACT_FK_ATHRZ_PROCEDEF
        FOREIGN KEY (PROC_DEF_ID_)
            REFERENCES ACT_RE_PROCDEF;

ALTER TABLE CAMUNDA.ACT_RU_TASK
    ADD CONSTRAINT ACT_FK_TASK_EXE
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION;

ALTER TABLE CAMUNDA.ACT_RU_TASK
    ADD CONSTRAINT ACT_FK_TASK_PROCINST
        FOREIGN KEY (PROC_INST_ID_)
            REFERENCES ACT_RU_EXECUTION;

ALTER TABLE CAMUNDA.ACT_RU_TASK
    ADD CONSTRAINT ACT_FK_TASK_PROCDEF
        FOREIGN KEY (PROC_DEF_ID_)
            REFERENCES ACT_RE_PROCDEF;

ALTER TABLE CAMUNDA.ACT_RU_VARIABLE
    ADD CONSTRAINT ACT_FK_VAR_EXE
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION;

ALTER TABLE CAMUNDA.ACT_RU_VARIABLE
    ADD CONSTRAINT ACT_FK_VAR_PROCINST
        FOREIGN KEY (PROC_INST_ID_)
            REFERENCES ACT_RU_EXECUTION;

ALTER TABLE CAMUNDA.ACT_RU_VARIABLE
    ADD CONSTRAINT ACT_FK_VAR_BYTEARRAY
        FOREIGN KEY (BYTEARRAY_ID_)
            REFERENCES ACT_GE_BYTEARRAY;

ALTER TABLE CAMUNDA.ACT_RU_JOB
    ADD CONSTRAINT ACT_FK_JOB_EXCEPTION
        FOREIGN KEY (EXCEPTION_STACK_ID_)
            REFERENCES ACT_GE_BYTEARRAY;

ALTER TABLE CAMUNDA.ACT_RU_EVENT_SUBSCR
    ADD CONSTRAINT ACT_FK_EVENT_EXEC
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION;

ALTER TABLE CAMUNDA.ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_EXE
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE CAMUNDA.ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_PROCINST
        FOREIGN KEY (PROC_INST_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

ALTER TABLE CAMUNDA.ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_PROCDEF
        FOREIGN KEY (PROC_DEF_ID_)
            REFERENCES ACT_RE_PROCDEF(ID_);

ALTER TABLE CAMUNDA.ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_CAUSE
        FOREIGN KEY (CAUSE_INCIDENT_ID_)
            REFERENCES ACT_RU_INCIDENT(ID_);

ALTER TABLE CAMUNDA.ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_RCAUSE
        FOREIGN KEY (ROOT_CAUSE_INCIDENT_ID_)
            REFERENCES ACT_RU_INCIDENT(ID_);

ALTER TABLE CAMUNDA.ACT_RU_EXT_TASK
    ADD CONSTRAINT ACT_FK_EXT_TASK_ERROR_DETAILS
        FOREIGN KEY (ERROR_DETAILS_ID_)
            REFERENCES ACT_GE_BYTEARRAY(ID_);

CREATE INDEX ACT_IDX_INC_JOB_DEF ON CAMUNDA.ACT_RU_INCIDENT(JOB_DEF_ID_);
ALTER TABLE CAMUNDA.ACT_RU_INCIDENT
    ADD CONSTRAINT ACT_FK_INC_JOB_DEF
        FOREIGN KEY (JOB_DEF_ID_)
            REFERENCES ACT_RU_JOBDEF(ID_);

ALTER TABLE CAMUNDA.ACT_RU_AUTHORIZATION
    ADD CONSTRAINT ACT_UNIQ_AUTH_USER
        UNIQUE (TYPE_, USER_ID_, RESOURCE_TYPE_, RESOURCE_ID_);

ALTER TABLE CAMUNDA.ACT_RU_AUTHORIZATION
    ADD CONSTRAINT ACT_UNIQ_AUTH_GROUP
        UNIQUE (TYPE_, GROUP_ID_, RESOURCE_TYPE_, RESOURCE_ID_);

ALTER TABLE CAMUNDA.ACT_RU_VARIABLE
    ADD CONSTRAINT ACT_UNIQ_VARIABLE
        UNIQUE (VAR_SCOPE_, NAME_);

ALTER TABLE CAMUNDA.ACT_RU_EXT_TASK
    ADD CONSTRAINT ACT_FK_EXT_TASK_EXE
        FOREIGN KEY (EXECUTION_ID_)
            REFERENCES ACT_RU_EXECUTION(ID_);

CREATE INDEX ACT_IDX_BATCH_SEED_JOB_DEF ON CAMUNDA.ACT_RU_BATCH(SEED_JOB_DEF_ID_);
ALTER TABLE CAMUNDA.ACT_RU_BATCH
    ADD CONSTRAINT ACT_FK_BATCH_SEED_JOB_DEF
        FOREIGN KEY (SEED_JOB_DEF_ID_)
            REFERENCES ACT_RU_JOBDEF(ID_);

CREATE INDEX ACT_IDX_BATCH_MONITOR_JOB_DEF ON CAMUNDA.ACT_RU_BATCH(MONITOR_JOB_DEF_ID_);
ALTER TABLE CAMUNDA.ACT_RU_BATCH
    ADD CONSTRAINT ACT_FK_BATCH_MONITOR_JOB_DEF
        FOREIGN KEY (MONITOR_JOB_DEF_ID_)
            REFERENCES ACT_RU_JOBDEF(ID_);

CREATE INDEX ACT_IDX_BATCH_JOB_DEF ON CAMUNDA.ACT_RU_BATCH(BATCH_JOB_DEF_ID_);
ALTER TABLE CAMUNDA.ACT_RU_BATCH
    ADD CONSTRAINT ACT_FK_BATCH_JOB_DEF
        FOREIGN KEY (BATCH_JOB_DEF_ID_)
            REFERENCES ACT_RU_JOBDEF(ID_);

-- -------------------------------------------------------------------------------------------------
-- POPULATE CAMUNDA TABLES
-- -------------------------------------------------------------------------------------------------
INSERT INTO CAMUNDA.ACT_GE_PROPERTY
VALUES ('schema.version', 'fox', 1);

INSERT INTO CAMUNDA.ACT_GE_PROPERTY
VALUES ('schema.history', 'create(fox)', 1);

INSERT INTO CAMUNDA.ACT_GE_PROPERTY
VALUES ('next.dbid', '1', 1);

INSERT INTO CAMUNDA.ACT_GE_PROPERTY
VALUES ('deployment.lock', '0', 1);

INSERT INTO CAMUNDA.ACT_GE_PROPERTY
VALUES ('history.cleanup.job.lock', '0', 1);

INSERT INTO CAMUNDA.ACT_GE_PROPERTY
VALUES ('startup.lock', '0', 1);

INSERT INTO CAMUNDA.ACT_GE_SCHEMA_LOG
VALUES ('0', CURRENT_TIMESTAMP, '7.13.0');
